---
import SiteOptions from "../site.config.mjs";

export interface Props {
  page: {
    data: any[];
    url: { current: string; next?: string; prev?: string };
    currentPage: number;
    lastPage: number;
    size: number;
    total: number;
  };
}

const { page } = Astro.props;

// Normalize base path (removes any `/page/X` or trailing slash)
let basePath = page.url.current
  .replace(/\/page\/\d+\/?$/, "")
  .replace(/\/$/, "")
  .replace(/\/\d+$/, "");

const visiblePages = Array.from({ length: page.lastPage }, (_, i) => i + 1).filter(
  (num) =>
    num === 1 ||
    num === page.lastPage ||
    Math.abs(num - page.currentPage) <= 2
);
---

<nav class="flex justify-center items-center space-x-2 flex-wrap mt-12" aria-label="Pagination Navigation">
  {SiteOptions.pagination.showPrevNext &&
    (page.url.prev ? (
      <a href={page.url.prev} class="px-4 py-2 text-sm font-medium" aria-label="Go to previous page">
        ← {SiteOptions.pagination.prevText}
      </a>
    ) : (
      <span class="px-4 py-2 text-sm font-medium cursor-not-allowed">
        ← {SiteOptions.pagination.prevText}
      </span>
    ))}

  {visiblePages.map((num, idx) => {
    const prevNum = visiblePages[idx - 1];
    const isEllipsis = idx > 0 && num - prevNum > 1;
    // Conditional for page 1 URL
    const url = num === 1
      ? (basePath === '/blog'
          ? `${basePath}/page/1`     // blog: go to dynamic page 1
          : `${basePath}`)           // tags/categories: go to landing
      : `${basePath}/page/${num}`; // pages 2+

    return (
      <div class="flex items-center">
        {isEllipsis && <span class="px-2 select-none">…</span>}
        {num === page.currentPage ? (
          <span class="px-3 py-2 text-sm font-medium bg-gray-900 text-white rounded-md" aria-current="page">
            {num}
          </span>
        ) : (
          <a href={url} class="px-3 py-2 text-sm font-medium hover:bg-gray-100 rounded-md">
            {num}
          </a>
        )}
      </div>
    );
  })}

  {SiteOptions.pagination.showPrevNext &&
    (page.url.next ? (
      <a href={page.url.next} class="px-4 py-2 text-sm font-medium" aria-label="Go to next page">
        {SiteOptions.pagination.nextText} →
      </a>
    ) : (
      <span class="px-4 py-2 text-sm font-medium cursor-not-allowed">
        {SiteOptions.pagination.nextText} →
      </span>
    ))}
</nav>

<div class="text-center mt-4 text-sm text-gray-500">
  Showing {(page.currentPage - 1) * page.size + 1} to {Math.min(page.currentPage * page.size, page.total)} of {page.total}
  {SiteOptions.pagination.postLabel}
</div>
