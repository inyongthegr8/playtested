---
import { getCollection } from "astro:content"
import BlogLayout from "../../../../layouts/BlogLayout.astro"
import Header from "../../../../components/Header.astro"
import Footer from "../../../../components/Footer.astro"
import PostCard from "../../../../components/PostCard.astro"
import Pagination from "../../../../components/Pagination.astro"
import SiteOptions from "../../../../site.config.mjs"


const POSTS_PER_PAGE = SiteOptions.postsPerPage ?? 10

export async function getStaticPaths() {
  const POSTS_PER_PAGE = SiteOptions.postsPerPage ?? 10
  const allPosts = await getCollection("article")

  const tags = new Map()

  for (const post of allPosts) {
    const tagList = post.data.tags ?? []
    for (const tag of tagList) {
      const slug = tag.toLowerCase().replace(/\s+/g, "-")
      if (!tags.has(slug)) tags.set(slug, [])
      tags.get(slug).push(post)
    }
  }

  const paths = []

  for (const [slug, posts] of tags.entries()) {
    const totalPages = Math.ceil(posts.length / POSTS_PER_PAGE)
    for (let i = 2; i <= totalPages; i++) {
      paths.push({ params: { tag: slug, page: i.toString() } })
    }
  }

  return paths
}

const { tag, page } = Astro.params
const currentPage = parseInt(page)
const allPosts = await getCollection("article")

const posts = allPosts.filter(post =>
  post.data.tags?.some(t => t.toLowerCase().replace(/\s+/g, "-") === tag)
).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())

const totalPages = Math.ceil(posts.length / POSTS_PER_PAGE)
const start = (currentPage - 1) * POSTS_PER_PAGE
const paginated = posts.slice(start, start + POSTS_PER_PAGE)

const pageData = {
  data: paginated,
  url: {
    current: `/tag/${tag}/page/${currentPage}`,
    prev: currentPage > 2 ? `/tag/${tag}/page/${currentPage - 1}` : `/tag/${tag}`,
    next: currentPage < totalPages ? `/tag/${tag}/page/${currentPage + 1}` : undefined,
  },
  currentPage,
  lastPage: totalPages,
  size: POSTS_PER_PAGE,
  total: posts.length,
}
---

<BlogLayout title={`Tag: ${tag} - Page ${currentPage}`}>
  <Header showTitle={true} />
  <h1 class="text-3xl font-bold mb-8 text-center capitalize">Tag: {tag.replace(/-/g, " ")}</h1>

   <ul class="grid grid-cols-2 gap-x-6 gap-y-6">
    {paginated.map(post => <PostCard post={post} />)}
  </ul>

  <Pagination page={pageData} />
  <Footer />
</BlogLayout>
