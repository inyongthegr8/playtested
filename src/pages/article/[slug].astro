---
import { getCollection } from "astro:content";
import BlogLayout from "../../layouts/BlogLayout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import FeaturedCard from "../../components/FeaturedCard.astro";
import Carousel from "../../components/Carousel.astro";
import SiteOptions from "../../site.config.mjs";
import { Image } from "astro:assets";

const { slug } = Astro.params;

// Load post based on slug
const allPosts = await getCollection("article");
const post = allPosts.find((p) => p.slug === slug);

if (!post) {
  throw new Error(`❌ Post not found for slug: ${slug}`);
}

const {
  title,
  pubDate,
  category,
  description,
  thumb,
  author,
  tags,
  large,
  score,
  gallery,
} = post.data;
const { Content } = await post.render();

const titleLines = title.includes("|")
  ? title.split("|").map((line) => line.trim())
  : [title];

const featuredPosts = allPosts
  .filter((p) => p.slug !== post.slug && p.data.featured)
  .sort(() => Math.random() - 0.5)
  .slice(0, 3);

const formattedDate = new Intl.DateTimeFormat("en-US", {
  year: "numeric",
  month: "long",
  day: "numeric",
}).format(pubDate);
---

<BlogLayout title={title} description={description}>
  <Fragment slot="head">
    <meta property="og:type" content="article" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={(thumb || large) ?? "/playtested.png"} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={(thumb || large) ?? "/playtested.png"} />
    <meta property="article:published_time" content={pubDate.toISOString()} />

    <script type="application/ld+json" set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "Article",
      "headline": title,
      "description": description,
      "image": (thumb || large) ? [thumb || large] : undefined,
      "datePublished": pubDate.toISOString(),
      "dateModified": pubDate.toISOString(),
      "author": [{ "@type": "Person", "name": author }],
      "mainEntityOfPage": { "@type": "WebPage", "@id": Astro.url.href },
      "publisher": { "@type": "Organization", "name": "PlayTested" }
    })} />
  </Fragment>

  <Header showTitle />

  <article class="relative mt-8">
    <!-- Sticky title block -->
    <div
      class="z-20 cursor-pointer transition-colors
             lg:bg-white lg:dark:bg-slate-800 lg:hover:bg-gray-50 lg:dark:hover:bg-slate-700
             lg:sticky lg:inset-x-0 lg:top-0"
      onclick="window.scrollTo({ top: 190, behavior: 'smooth' })"
    >
      <div class="w-full max-w-5xl mx-auto xl:mx-4 flex flex-col lg:flex-row items-center lg:items-start gap-1 lg:gap-4 py-2 md:py-4 mb-2 lg:mb-4 px-2 md:px-0 text-center lg:text-left leading-tight">
        {score && (
          <div class="shrink-0">
            <div class="article-score-badge beside-title mx-auto md:mx-0 scale-90 lg:scale-95 xl:scale-100">
              <span class="article-score-value text-base lg:text-lg xl:text-2xl">{score}</span>
              <span class="article-score-label text-[10px] lg:text-xs xl:text-sm">Score</span>
            </div>
          </div>
        )}

        <h1 class="text-lg sm:text-xl lg:text-2xl xl:text-4xl font-semibold tracking-tight text-gray-900 dark:text-slate-100 leading-snug">
          {titleLines.map((line, i) => (
            <>
              {line}
              {i < titleLines.length - 1 && <br />}
            </>
          ))}
        </h1>
      </div>
    </div>

{Array.isArray(gallery) && gallery.length > 0 && (
<div class="float-right w-full max-w-[420px] ml-8 mb-4 mt-4 sm:mt-16 md:mt-24 lg:mt-32">
        <Carousel images={gallery} />
      </div>
    )}

    <div class="text-sm text-gray-500 dark:text-gray-400 mb-4">
      {formattedDate} • {author}
      <span> • Category: {category}</span>
    </div>

    {tags?.length > 0 && (
      <div class="mt-2 text-xs sm:text-sm">
        <span class="font-medium text-gray-500 dark:text-gray-400 mr-1">Tags:</span>
        {tags.map((tag) => (
          <a
            href={`/tag/${tag.toLowerCase().replace(/\s+/g, "-")}`}
            class="inline-block mt-1 bg-gray-100 text-gray-600 dark:bg-slate-700 dark:text-slate-300 px-1.5 py-0.5 sm:px-4 sm:py-1 rounded hover:bg-gray-200 dark:hover:bg-slate-600 ml-1 no-underline hover:underline text-[10px] sm:text-xs"
          >
            {tag}
          </a>
        ))}
      </div>
    )}

    {large && (
      <div class="mb-8 clear-both">
        <Image
          src={large}
          alt={title}
          width={800}
          height={450}
          loading="eager"
          class="w-full h-auto rounded-lg shadow-md"
        />
      </div>
    )}

    <div
      class="pt-8 prose prose-h2:text-2xl prose-lg max-w-none text-gray-700 dark:prose-strong:text-slate-100 dark:text-gray-300 prose-headings:text-gray-900 dark:prose-headings:text-slate-100 prose-a:text-blue-600 dark:prose-a:text-blue-400 prose-code:text-slate-700 dark:prose-code:text-slate-100 prose-pre:bg-gray-100 dark:prose-pre:bg-slate-800 prose-blockquote:border-gray-300 dark:prose-blockquote:border-gray-600 prose-blockquote:text-gray-600 dark:prose-blockquote:text-gray-400 prose-h3:text-[1.2em]"
    >
      <Content />
    </div>
  </article>

  {SiteOptions.showSimilarPosts && featuredPosts.length > 0 && (
    <>
      <hr class="border-t border-gray-200 dark:border-gray-700 my-12" />
      <section>
        <h2 class="text-2xl font-semibold mb-8 text-center text-gray-800 dark:text-slate-200">
          {SiteOptions.labels.youMightAlsoLike}
        </h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-8">
          {featuredPosts.map((p) => (
            <FeaturedCard post={p} />
          ))}
        </div>
      </section>
    </>
  )}

  <Footer />
</BlogLayout>
